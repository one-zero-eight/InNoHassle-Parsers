import json
import logging
import re

import icalendar

from schedule.electives.config import electives_config as config
from schedule.electives.parser import ElectiveParser, convert_separation

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    parser = ElectiveParser()

    calendars = {
        "filters": [
            {
                "title": "Elective type",
                "alias": "elective_type",
            }
        ],
        "title": "Electives",
        "calendars": [],
    }

    for i in range(len(config.TARGET_SHEET_TITLES)):
        sheet_title = config.TARGET_SHEET_TITLES[i]

        df = parser.get_clear_df(
            spreadsheet_id=config.SPREADSHEET_ID,
            target_title=sheet_title,
            target_range=config.TARGET_RANGES[i],
        )

        parsed = parser.parse_df(df, config.ELECTIVES)
        converted = convert_separation(parsed)

        directory = config.SAVE_ICS_PATH / sheet_title.replace("/", "-").replace(
            " ", "-"
        )

        directory.mkdir(parents=True, exist_ok=True)

        for calendar_name, events in converted.items():
            calendar = icalendar.Calendar()

            elective = None

            if events:
                elective = events[0].elective

            for event in events:
                calendar.add_component(event.get_vevent())

            # print
            calendar["prodid"] = "-//one-zero-eight//InNoHassle Schedule"
            calendar["version"] = "2.0"
            calendar["x-wr-calname"] = calendar_name
            calendar["x-wr-caldesc"] = "Generated by InNoHassle Schedule"
            calendar["x-wr-timezone"] = config.TIMEZONE
            calendar["method"] = "PUBLISH"

            file_path = directory / f"{calendar_name}.ics"
            relative_directory = file_path.relative_to(config.SAVE_JSON_PATH.parent)

            # change 'gr1' to 'group1' through re
            calendar_name = re.sub(r"gr(oup)?", "group", calendar_name)
            calendar_name = calendar_name.replace("-", " ")

            calendars["calendars"].append(
                {
                    "name": calendar_name,
                    "type": "elective",
                    "path": relative_directory.as_posix(),
                    "satellite": {
                        "elective_type": config.TARGET_SHEET_TITLES[i],
                        "description": elective.name if elective else "",
                    },
                }
            )

            with open(file_path, "wb") as f:
                f.write(calendar.to_ical())

    # create a new .json file with information about calendar
    with open(config.SAVE_JSON_PATH, "w") as f:
        json.dump(calendars, f, indent=4, sort_keys=True)
