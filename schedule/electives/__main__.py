import json
import logging
import re
from hashlib import md5, sha1

import icalendar
import pandas as pd

from schedule.electives.config import electives_config as config
from schedule.electives.parser import ElectiveParser, convert_separation

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    parser = ElectiveParser()

    calendars = {
        "filters": [
            {
                "title": "Elective type",
                "alias": "elective_type",
            }
        ],
        "title": "Electives",
        "calendars": [],
    }

    xlsx = parser.get_xlsx_file(
        spreadsheet_id=config.SPREADSHEET_ID,
    )

    dfs = parser.clear_df(
        xlsx_file=xlsx,
        targets=config.TARGETS,
    )
    # noinspection InsecureHash
    to_hash = (
        sha1(pd.util.hash_pandas_object(dfs[target.sheet_name]).values).hexdigest()
        for target in config.TARGETS
    )
    # noinspection InsecureHash
    hashsum = sha1("\n".join(to_hash).encode("utf-8")).hexdigest()
    parser.logger.info(f"Hashsum: {hashsum}")
    xlsx_path = config.TEMP_DIR / f"{hashsum}.xlsx"
    # check if file exists
    if xlsx_path.exists():
        parser.logger.info(f"Hashsum match!")

    with open(xlsx_path, "wb") as f:
        parser.logger.info(f"Loading cached file {hashsum}.xlsx")
        xlsx.seek(0)
        content = xlsx.read()
        f.write(content)

    for target in config.TARGETS:
        parser.logger.info(f"Processing {target.sheet_name}... Range: {target.range}")

        sheet_df = next(
            df
            for sheet_name, df in dfs.items()
            if sheet_name.startswith(target.sheet_name)
        )
        by_weeks = parser.split_df_by_weeks(sheet_df)
        index = {}
        for sheet_df in by_weeks:
            index.update(sheet_df.index)
        big_df = pd.DataFrame(index=list(index))
        big_df = pd.concat([big_df, *by_weeks], axis=1)
        events = parser.parse_df(big_df, config.ELECTIVES)

        converted = convert_separation(events)

        directory = config.SAVE_ICS_PATH / target.sheet_name.replace("/", "-").replace(
            " ", "-"
        )

        directory.mkdir(parents=True, exist_ok=True)

        for calendar_name, events in converted.items():
            calendar = icalendar.Calendar()

            elective = None

            if events:
                elective = events[0].elective

            for event in events:
                calendar.add_component(event.get_vevent())

            # print
            calendar["prodid"] = "-//one-zero-eight//InNoHassle Schedule"
            calendar["version"] = "2.0"
            calendar["x-wr-calname"] = calendar_name
            calendar["x-wr-caldesc"] = "Generated by InNoHassle Schedule"
            calendar["x-wr-timezone"] = config.TIMEZONE
            calendar["method"] = "PUBLISH"

            file_path = directory / f"{calendar_name}.ics"
            relative_directory = file_path.relative_to(config.SAVE_JSON_PATH.parent)

            # change 'gr1' to 'group1' through re
            calendar_name = re.sub(r"gr(oup)?", "group", calendar_name)
            calendar_name = calendar_name.replace("-", " ")

            calendars["calendars"].append(
                {
                    "name": calendar_name,
                    "type": "elective",
                    "path": relative_directory.as_posix(),
                    "satellite": {
                        "elective_type": target.sheet_name,
                        "description": elective.name if elective else "",
                    },
                }
            )

            with open(file_path, "wb") as f:
                f.write(calendar.to_ical())

    # create a new .json file with information about calendar
    with open(config.SAVE_JSON_PATH, "w") as f:
        json.dump(calendars, f, indent=4, sort_keys=True)
