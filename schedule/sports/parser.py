import asyncio
import datetime
import json
import logging

import aiohttp as aiohttp

from itertools import groupby

import icalendar

from schedule.sports.config import sports_config as config
from schedule.sports.models import (
    ResponseSports,
    ResponseSportSchedule,
    SportScheduleEvent,
)


class SportParser:
    logger = logging.getLogger(__name__ + "." + "Parser")

    def __init__(self, session: aiohttp.ClientSession):
        self.session = session

    async def get_sports(self) -> ResponseSports:
        url = f"{config.api_url}/sports"
        self.logger.info(f"Getting sports from {url}")
        async with self.session.get(url) as response:
            text = await response.text()
            response_schema = ResponseSports.parse_raw(text)
            self.logger.info(f"Got {len(response_schema.sports)} sports")
            return response_schema

    async def get_sport_schedule(self, sport_id: int) -> ResponseSportSchedule:
        finalDate = config.END_OF_SEMESTER.strftime("%Y-%m-%d")
        url = f"{config.api_url}/calendar/{sport_id}/schedule?start={datetime.date.today()}T00%3A00&end={finalDate}T00%3A00"
        self.logger.info(f"Getting sport schedule from {url}")
        async with self.session.get(url) as response:
            text = await response.text()
            response_schema = ResponseSportSchedule.parse_raw(text)
            self.logger.info(f"Got {len(response_schema.__root__)} events")
            return response_schema


async def main():
    async with aiohttp.ClientSession(
        headers={"Content-Type": "application/json"}
    ) as session:
        parser = SportParser(session)
        logger = SportParser.logger

        get_sports_answer = await parser.get_sports()
        sports = {sport.id: sport for sport in get_sports_answer.sports}

        tasks = {}
        for sport_id in sports.keys():
            task = asyncio.create_task(parser.get_sport_schedule(sport_id))
            tasks[sport_id] = task

        await asyncio.gather(*tasks.values())
        logger.info("Got all sport schedules")
        sport_schedules = {sport_id: task.result() for sport_id, task in tasks.items()}
        sport_schedules: dict[int, ResponseSportSchedule]

        sport_events = []

        for sport_id, sport_schedule in sport_schedules.items():
            sport = sports[sport_id]
            _sport_events = [
                SportScheduleEvent(
                    sport=sport, sport_schedule_event=sport_schedule_event
                )
                for sport_schedule_event in sport_schedule.__root__
            ]
            sport_events.extend(_sport_events)
        logger.info(f"Processed {len(sport_events)} sport events")

        grouping = lambda x: (x.sport.name, x.sport_schedule_event.title or "")
        sport_events.sort(key=grouping)

        calendars = {
            "calendars": [],
            "title": "Sport",
            "filters": [{"alias": "sport_type", "name": "Sport type"}],
        }

        directory = config.SAVE_ICS_PATH
        logger.info(f"Saving calendars to {directory}")
        json_file = config.SAVE_JSON_PATH
        logger.info(f"Saving json to {json_file}")
        logger.info(f"Grouping events by sport.name and sport_schedule_event.title")
        for (title, subtitle), events in groupby(sport_events, key=grouping):
            logger.info(f"Saving {title} - {subtitle} calendar")
            calendar = icalendar.Calendar(
                prodid="-//one-zero-eight//InNoHassle Schedule",
                version="2.0",
                method="PUBLISH",
            )
            calendar_name = f"{title} - {subtitle}" if subtitle else title
            calendar["x-wr-calname"] = calendar_name
            calendar["x-wr-timezone"] = config.TIMEZONE
            calendar["x-wr-caldesc"] = "Generated by InNoHassle Schedule"

            vevents = [
                event.get_vevent(config.START_OF_SEMESTER, config.END_OF_SEMESTER)
                for event in events
            ]
            calendar.subcomponents.extend(vevents)
            filename = f"{calendar_name.replace(' ', '').lower()}.ics"
            file_path = directory / filename
            calendars["calendars"].append(
                {
                    "name": calendar_name,
                    "file": file_path.relative_to(json_file.parent).as_posix(),
                    "sport_type": title,
                }
            )

            with open(file_path, "wb") as file:
                file.write(calendar.to_ical())

        logger.info(f"Saving calendars information to {json_file}")
        with open(json_file, "w") as f:
            json.dump(calendars, f, indent=4, sort_keys=True)

        logger.info("Done")


if __name__ == "__main__":
    asyncio.run(main())
